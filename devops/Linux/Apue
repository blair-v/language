Linux API
09_进程关系
 9.4 进程组 ： 一个或多个进程的集合。它们与同一作业相关连。
   每个进程组都可以有一个组长进程。组长进程ID = 进程组ID
    组长进程可以创建一个进程组，创建该组中的进程，然后终止。
    waitpid 函数可用来等待一个进程或者指定进程组中的一个进程终止。(信号)
 9.5 会话  ： (session) 是一个或多个进程组的集合。
   #include <unistd.h>
   pid_t setsid(void);
   如果调用此函数的进程不是一个进程组的组长，则此函数就会创建一个新会话，发生 {
     （1）该进程变成新会话首进程。该进程是新会话中的唯一进程。
     （2）该进程成为一个新进程组的组长进程。新进程组ID是该调用进程的进程ID
     （3）该进程没有控制终端。如果在调用setsid之前该进程有控制终端，那么联系也会被切断。
   }
第 10 章 _信号
10.1 引言 ： 信号是软件中断
               信号提供了一种处理异步事件的方法。
10.2 信号概念
   每个信号都有一个名字。SIG开头。
   SIGABRT 夭折信号。 当进程调用abort函数时产生这种信号。
   SIGALRM 闹钟信号。 当由alarm函数设置的计时器超时后产生此信号。
   #include <signal.h> 这些信号被定义为整数。
    注意 ： 若应用程序与内核两者都需要使用同一定义，那么就将有关信息放置在内核头文件中。
   很多条件可以产生信号 ： 『
    (1) 当用户按某些终端键时，引发终端产生的信号。例如 ： Ctrl + C
    (2) 硬件异常产生信号 ： 除数为0，无效的内存引用等。 
             硬件检测到通知内核，内核产生信号SIGSEGV发给进程.
    (3) 进程调用 kill 函数可将信号发送给另一个进程或进程组。
    (4) 用户可用kill命令将信号发送给其他进程。
    (5) 当检测到某种软件条件已经发生，并应将其通知有关进程时也产生信号。
  信号的处理 ：
   （1）忽略 （2）捕捉信号 （3）执行系统默认动作
             
13_守护进程
 daemon 是生存期较长的一种进程。在系统自举时启动, 它们没有控制终端。
  init  系统守护进程，负责启动各运行层次特定的系统服务。
  syslogd 守护进程可由帮助操作人员把系统消息记入日志的任何程序使用。
  cron守护进程(crond) 在指定的日期和时间执行指定的命令。
  大多数守护进程都以超级用户(userid = 0)特权运行。没有一个守护进程具有控制终端。内核守护进程以无控制终端方式启动
   。用户层守护进程缺少控制终端可能是守护进程调用了setsid的结果。所有用户层守护进程都是进程组的组长进程以及会话的
   首进程，而且是这些进程组和会话中的唯一进程。最后，注意：多数守护进程的父进程是init进程。
   
   
