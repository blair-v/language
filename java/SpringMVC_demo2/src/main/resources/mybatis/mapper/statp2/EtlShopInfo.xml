<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.x.dmt.dao.statp2.EtlShopInfoDAO">

    <select id="getEtlShopInfo" parameterType="java.util.Map" resultType="EtlShopInfo">
        <![CDATA[
        SELECT
          DISTINCT s.id as id,
          (s.`name`) as name,
          s.fullname as fullName,
          s.address as address,
          s.category as category,
          p.latitude as latitude,
          p.longitude as longitude,
          s.enableBES as enableBES,
          s.enableCash as enableCash,
          s.orderAmount as orderAmount,
          s.transactionAmount as transactionAmount
        FROM
            (SELECT
                shop.*,
                c.`name` AS category,
                si.enableBES,
                si.enableCash,
                so.orderAmount,
                so.transactionAmount
            FROM
            (
              SELECT
                s_shop.*
              FROM
                (SELECT * FROM shop) s_shop
              LEFT JOIN
                (SELECT
                     *
                 FROM account
                 WHERE businessType = 'SHOP'
                 AND nature = 'FORMAL'
                 GROUP BY systemId, businessId, businessType
                ) s_account
              ON
                s_shop.id = s_account.businessId
              AND
                s_shop.systemId = s_account.systemId
              WHERE
                s_account.username IS NOT NULL
              AND s_account.nature = 'FORMAL' ) shop
              LEFT JOIN
              (SELECT
                 businessId,
                 SUM(orderAmount) orderAmount,
                 SUM(transactionAmount) transactionAmount
               FROM
                 stat_order
               WHERE
                 statDate = ADDDATE(#{end_date},0)
               GROUP BY
                 businessId
              ) so
              ON
              shop.id = so.businessId
              LEFT JOIN category c
              ON shop.category_id = c.id
              LEFT JOIN shopinfo si
              ON shop.id = si.id
              ) s
            LEFT JOIN
              (SELECT
                foreignId,
                latitude,
                longitude
            FROM
                position
            GROUP BY foreignId
              ) p
            ON s.id = p.foreignId;
        ]]>
    </select>
</mapper>
